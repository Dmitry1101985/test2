<?php

class View
{
    protected $data = [];
    /*
     * Создали внутрненний защтщенный массив. Он нужен для того, чтобы передавать данные
     * во вьюшку не напрямую из контроллера, а через этот класс.
     */
    const TEMPL = '/../views/';

    /*
     * Определили константу этого класса, чтобы в дальнейшем использовать при подключении
     * шаблонон вьюшки. В данном случае это путь к дирректории. Таким образом, если мы
     * переместим папку с вьюшками в другое место - достаточно будет отредактировать
     * константу.
     */

    public function __set($name, $value)
    {
        $this->data[$name] = $value;
    }

    /*
     * метод assign($name, $value) мы заменяем методом __set($name, $value). В данном случае он
     * дает нам возможности задавать параметры свойства, которое мы не объявляли в классе -
     * генерировать его на ходу. Т.е в контроллере мы вызовем метод
     * $view->items = $news. Свойство items мы в классе не задавали.
     */
    public function __get($name){
        return $this->data[$name];
    }

    /*
     * этот метод позволит нам получить данные из необъявленного свойства метода, который
     * мы указали выше. Использоваться в данном случае он не будет. Но если возникнет такая необходимость
     * в контроллере можно использовать: $some = $view->items. В данном случае в переменную $some мы
     * запишем массив.
     */


    /*
    public function assign($name, $value){
        $this->data[$name] = $value;
    }


     * этот метод при вызове и передачи массива с данными из контроллера записывает полученные данные
     * во внутренний массив protected $data = []
     */

    public function render($dir){
        foreach ($this->data as $key => $value){
            $$key = $value;
        }

        /*
         * этот цикл позволяет избавиться от необходимости во вьюшке обращаться к внутреннему
         * массиву: $this->data['items']. Вместо этого мы прокидываем во вьюшку массив $items
         */
        ob_start();//подключаем буфер
        include __DIR__ . self::TEMPL . $dir;
        $content = ob_get_contents();//записываем из буфера в переменную
        ob_end_clean();//очищаем буфер
        return $content;
        /*
         * подключаем вьюшку используя константу и расположение , которое будет закинуто
         * в контроллере.
         */
    }

    public function display($dir){
        echo $this->render($dir);
    }
    /*
     * в методе render($dir) мы перехватываем вывлд в браузер и записываем его в переменную
     * в виде потока байт. В данном конкретном случае мы не используем возможности буфера, но, в
     * дальнейшем, можем отредактировать поток данных до того, как он выведется пользователю.
     */
}